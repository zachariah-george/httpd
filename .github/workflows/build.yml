name: Build if update is available

on:
  schedule:
    - cron: '0 */6 * * *'
  push:
    paths:
      # - '**.py'
      # - '.github/workflows/build.yml'
      - 'vars.yml'
      - 'custom.conf'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          vars.yml
          updateVars.py
          requirements.txt
          build-httpd.yml
          custom.conf
          dummy-site.com.conf
        sparse-checkout-cone-mode: false
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run updateVars.py
      run: python updateVars.py
    
    - name: Check if vars.yml has changed
      id: check_changes
      run: |
        if git diff --quiet vars.yml; then
          echo "No changes in vars.yml"
          echo "vars_changed=false" >> $GITHUB_ENV
        else
          echo "Changes detected in vars.yml"
          echo "vars_changed=true" >> $GITHUB_ENV
        fi
    
    - name: Commit and Push vars.yml if it has changed
      if: ${{ env.vars_changed == 'true' }}
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git add vars.yml
        git commit -m "Auto-update vars.yml"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run Ansible playbook
      if: ${{ env.vars_changed == 'true' }}
      run: ansible-playbook build-httpd.yml --connection=local --extra-vars '@vars.yml'
    
    - name: Archive production artifacts
      if: ${{ env.vars_changed == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: httpd-artifacts
        path: ./tmp/httpd/
    
    - name: Compress httpd directory
      if: ${{ env.vars_changed == 'true' }}
      run: |
        cd ./tmp/httpd
        zip -r ../../httpd.zip .
     
    - name: Extract httpd_version from vars.yml
      if: ${{ env.vars_changed == 'true' }}
      id: vars
      run: |
        # echo "::set-output name=version::$(python -c "import yaml;print(yaml.safe_load(open('vars.yml'))['httpd_version'])")"
        version=$(python -c "import yaml;print(yaml.safe_load(open('vars.yml'))['httpd_version'])")
        datetime=$(date +"%Y%m%d%H%M%S")
        version_with_datetime="$version-$datetime"
        echo "::set-output name=version::${version_with_datetime}"

    - name: Create Release
      if: ${{ env.vars_changed == 'true' }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.vars.outputs.version }}
        release_name: Release ${{ steps.vars.outputs.version }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: ${{ env.vars_changed == 'true' }}
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./httpd.zip
        asset_name: httpd.zip
        asset_content_type: application/zip
